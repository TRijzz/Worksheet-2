# -*- coding: utf-8 -*-
"""worksheet1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13QRUFkhYpjaLH_v5WmfpS6ekSsTEEaag
"""

import numpy as np
# Create and display zero, one, and n-dimensional arrays
zero_dim_array = np.array(5)
one_dim_array = np.array([1, 2, 3])
n_dim_array = np.array([[1, 2], [3, 4]])
for arr in [zero_dim_array, one_dim_array, n_dim_array]:
    print(f"Array:\n{arr}\nDimension: {arr.ndim}\nData type: {arr.dtype}\n")



# 2 Array Dimension: Shape and Reshape of Array :
import numpy as np
array_0d = np.array(5)
array_1d = np.array([1,2,3,4,5])
array_2d = np.array([[1,2,3],[4,5,6]])
array_3d = np.array([[[1,2],[3,4],[5,6],[7,8]]])
# print arrays with shapes
for i, arr in enumerate([array_0d,array_1d,array_2d,array_3d]):
    print(f"{i}D Array:\n{arr}\nShape: {arr.shape}\n")

# Reshaping Array
import numpy as np
array = np.array([[1,2,3],[4,5,6]])
reshaped_array = array.reshape(3,2)
print("Original Shape: ",array.shape,"\nReshaped Shape:",reshaped_array.shape)
print(array )
print(reshaped_array)

# Sample code from slide -17 Reshaping an Array
import numpy as np
array = np.array([[1,2,3],[4,5,6]])
reshaped_array = array.reshape(3,2)
print("Original Shape:",array.shape,"\nReshaped Shape:",reshaped_array.shape)

# Array Creation
# Arrays with
# slide 18
import numpy as np
a = np.arange(1,10)
print(a)
x = range(1,10)
print(x)
print(list(x))
x= np.arange(10.4)
print(x)
x = np.arange(0.5,10.4,0.8)
print(x)

# Sample Code from Slide - 19 - Arrays with evenly Spaced values - linspace.
import numpy as np
# 50 values between 1 and 10:
print(np.linspace(1,10))
# 7 values between 1 and 10
print(np.linspace(1,10,7))
# excludeing the endpoint
print(np.linspace(1,10,7,endpoint=False))

# Sample Code form slide - 20 - Initializing an Array.
import numpy as np
# Create arrays of specified shapes
ones_array = np.ones((2,3))
zeros_array = np.zeros((3,2))
empty_array = np.empty((2,3))
identity_matrix = np.eye(3)
print(ones_array,zeros_array,empty_array,identity_matrix,sep='\n\n')

# Sample Code form slide - 21 - Converting list to array using np.array.
import numpy as np
array_from_list = np.array([1,2,3]) # [1 2 3]
array_from_tuple = np.array((4,5,6))
array_from_nested_list = np.array([[1,2,3],[4,5,6]])
print(array_from_list,array_from_tuple,array_from_nested_list, sep='\n')

# Sample Code form slide - 22 - From shape of an existing array.
import numpy as np
arr = np.array([[1,2,3],[4,5,6]])
zeros, ones, empty = np.zeros(arr.shape), np.ones(arr.shape), np.empty(arr.shape)
print(arr,zeros,ones,empty,sep='\n')

# Sample Code form slide - 23 - Manipulatiing existing array.
import numpy as np
array = np.array([1,2,3])
new_array = array *2
copies_array = np.copy(array)
sliced_array = array[1:2]
print(array,new_array,copies_array,sliced_array,sep='\n')

# Warming up exercise:Basic Vector and Matrix Operation with Numpy
# qn 1
import numpy as np
empty_array = np.empty((2,2))
print(empty_array)

# initialize an all one array with size 4*2
# qn 2
import numpy as np
one_array = np.ones((4,2))
print(one_array)

# Return a new array of given shape and type, filled with fill value.{Hint: np.full}
# qn3
import numpy as np
array = np.full((3,3),7)
print(array)

# Return a new array of zeros with same shape and type as a given array.{Hint: np.zeros like}
# qn4
import numpy as np
original_array = np.array([[1,2,3],[4,5,6]])
zeros_array = np.zeros_like(original_array)
print(zeros_array)

# Return a new array of ones with same shape and type as a given array.{Hint: np.ones like}
# qn5
import numpy as np
original_array = np.array([[3,4,5],[6,7,8]])
ones_array = np.ones_like(original_array)
print(ones_array)

# For an existing list new_list = [1,2,3,4] convert to an numpy array.{Hint: np.array()}
# qn6
import numpy as np
new_list = [1,2,3,4]
to_array = np.array(new_list)
print(to_array)

# Problem - 2: Array Manipulation: Numerical Ranges and Array indexing:
# qn 1
import numpy as np
a = np.arange(1,50)
print(a)

# qn2
import numpy as np
array = np.arange(9)
matrix = array.reshape(3,3)
print(matrix)

# qn3
import numpy as np
identity_matrix = np.eye(3)
print(identity_matrix)

# qn4
import numpy as np
array = np.random.random(30)
mean_matrix = array.mean()
print(mean_matrix)

# qn5
import numpy as np
array = np.random.random(100)
reshape_array = array.reshape(10,10)
print(reshape_array)
maximum_value = reshape_array.max()
minimum_value = reshape_array.min()
print(maximum_value)
print(minimum_value)

# qn6
import numpy as np
zeros_array = np.zeros(10)
zeros_array[5] = 1
print(zeros_array)

# qn7
arr = [1,2,0,0,4,0]
revers_array = np.flip(arr)
print(revers_array)

# qn8
import numpy as np
rows ,cols = 6,6
array = np.zeros((rows,cols),dtype=int)
print(array)
# 1st row
array[0,:] =1
print(array)
# last row
array[-1,:]=1
print(array)
# 1st column
array[:,0]=1
print(array)
# last column
array[:,-1]=1
print(array)

import  numpy as np
rows , cols = 8,8
checkerboard = np.zeros((rows,cols),dtype=int)
print(checkerboard)
checkerboard[1::2, ::2] = 1 #Odd rows ,even columns
print(checkerboard)
checkerboard[::2, 1::2] = 1  # Even rows, odd columns
print(checkerboard)

# matrix multiplications
import numpy as np
# Define two matrices
A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.array([[7, 8], [9, 10], [11, 12]])
# Matrix multiplication using np.dot
result_dot = np.dot(A, B)
print("Result with np.dot:\n", result_dot) # Output shape: (2, 2)

import numpy as np
A = np.array([[1, 2], [3, 4]])
B = np.array([5, 6])
print("Inverse:\n", np.linalg.inv(A))
# Output: Inverse: [[-2. 1. ], [ 1.5 -0.5]]
print("Determinant:", np.linalg.det(A))
# Output: Determinant: -2.0
print("Frobenius Norm:", np.linalg.norm(A, 'fro'))
# Output: Frobenius Norm: 5.4772
print("2-Norm (Euclidean):", np.linalg.norm(A))
# Outptut: 2-Norm(Euclidean): 5.4772
print("Solution x:", np.linalg.solve(A,B))

# qn1
A = np.array([[3,4],[7,4]])
A_inverse = np.linalg.inv(A)
I = np.dot(A,A_inverse)
print(I)

# qn2
import numpy as np
A = np.array([[3,4],[7,4]])
B = np.array([[5,3],[2,1]])
A_B = np.dot(A,B)
B_A = np.dot(B,A)
print(A_B)
print(B_A)

# qn3
import numpy as np
A = np.array([[3,4],[7,4]])
B = np.array([[5,3],[2,1]])
AB = np.dot(A,B)
TA = A.transpose()
TB = B.transpose()
BTAT = np.dot(TB,TA)
ABT = AB.transpose()
print("(AB)^T  = ",ABT )
print("B^TA^T = ",BTAT)

import numpy as np
A = np.array([[2,-3,1],[1,-1,2],[3,1,-1]])
B = np.array([[-1],[-3],[9]])
IA = np.linalg.inv(A)
X = np.dot(IA,B)
print("X=",X[0],"Y=" ,X[1],"Z=", X[2])

import numpy as np
x = np.array([[1,2],[3,5]])
y = np.array([[5,6],[7,8]])
v = np.array([9,10])
w = np.array([11,12])
add = np.add(x,y)
print(add)
subtract = np.subtract(x,y)
print(subtract)
multiply = np.dot(x,y)
print(multiply)
x2 = np.power(x,2)
print(x2)

